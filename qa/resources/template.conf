sparkz {
  dataDir = "%(DIRECTORY)s/sc_node%(NODE_NUMBER)s/blockchain"
  logDir = "%(DIRECTORY)s/sc_node%(NODE_NUMBER)s/log"

  logInfo {
    logFileName = "debugLog.txt"
    logFileLevel = "%(LOG_FILE_LEVEL)s"
    logConsoleLevel = "%(LOG_CONSOLE_LEVEL)s"
  }
  restApi {
    bindAddress = "%(API_ADDRESS)s:%(API_PORT)s"
    apiKeyHash = "%(API_KEY_HASH)s"
    timeout = %(API_TIMEOUT)s
  }

  network {
    nodeName = "node%(NODE_NUMBER)s"
    bindAddress = "%(API_ADDRESS)s:%(BIND_PORT)s"
    knownPeers = []
    agentName = "2-Hop"
    maxConnections = %(MAX_CONNECTIONS)d
    maxPacketSize = %(MAX_PACKET_SIZE)d
  }

  websocket {
	  address = "%(WEBSOCKET_ADDRESS)s"
	  connectionTimeout = %(CONNECTION_TIMEOUT)d milliseconds
	  reconnectionDelay = %(RECONNECTION_DELAY)d seconds
      reconnectionMaxAttempts = %(RECONNECTION_MAX_ATTEMPTS)d
      wsServer = true
      wsServerPort = 0
  }

  mempool {
      #unit is MB
      maxSize = %(MEMPOOL_MAX_SIZE)d
      #unit is ZENtoshi per kb
      minFeeRate =  %(MEMPOOL_MIN_FEE_RATE)d
  }


  wallet {
    seed = "%(WALLET_SEED)s"
    genesisSecrets = %(GENESIS_SECRETS)s
    maxTxFee = %(MAX_TX_FEE)d
  }

  genesis {
    scGenesisBlockHex = "%(GENESIS_DATA)s"
    scId = "%(SIDECHAIN_ID)s"
    powData = "%(POW_DATA)s"
    mcBlockHeight = %(BLOCK_HEIGHT)d
    mcNetwork = %(NETWORK)s
    withdrawalEpochLength = %(WITHDRAWAL_EPOCH_LENGTH)d
    initialCumulativeCommTreeHash = "%(INITIAL_COMM_TREE_CUMULATIVE_HASH)s"
  }

  withdrawalEpochCertificate {
    submitterIsEnabled = %(SUBMITTER_CERTIFICATE)s
    certificateSigningIsEnabled = %(CERTIFICATE_SIGNING)s
    signersPublicKeys = %(SIGNER_PUBLIC_KEY)s
    mastersPublicKeys = %(MASTER_PUBLIC_KEY)s
    signersThreshold = %(THRESHOLD)d
    signersSecrets = %(SIGNER_PRIVATE_KEY)s
    maxPks = %(MAX_PKS)d
    typeOfCircuitNumber = %(TYPE_OF_CIRCUIT_NUMBER)s
    certProvingKeyFilePath = "%(CERT_PROVING_KEY_PATH)s"
    certVerificationKeyFilePath = "%(CERT_VERIFICATION_KEY_PATH)s"
    certificateAutomaticFeeComputation = %(AUTOMATIC_FEE_COMPUTATION)s
    certificateFee = %(CERTIFICATE_FEE)s
  }

  csw {
    cswProvingKeyFilePath = "%(CSW_PROVING_KEY_PATH)s"
    cswVerificationKeyFilePath = "%(CSW_VERIFICATION_KEY_PATH)s"
  }

  forger {
    restrictForgers = %(RESTRICT_FORGERS)s
    allowedForgersList = %(ALLOWED_FORGERS_LIST)s
  }
}
